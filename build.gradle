plugins {
    id 'java'
    id 'application'
}

def USE_NIGHTLY = System.getenv('USE_LIBTORCH_NIGHTLY')?.toBoolean()

repositories {
    jcenter()

    if (USE_NIGHTLY) {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
}

dependencies {
    if (USE_NIGHTLY) {
        implementation 'org.pytorch:pytorch_java_only:1.5.0-SNAPSHOT'
        implementation 'org.nd4j:nd4j-api:1.0.0-beta7'
        implementation 'org.nd4j:nd4j-native:1.0.0-beta7'
        implementation 'org.nd4j:nd4j-native-platform:1.0.0-beta7'
        implementation 'org.springframework:spring-core:2.5.6'
        implementation 'org.slf4j:slf4j-api:1.7.5'
        implementation 'org.slf4j:slf4j-log4j12:1.7.5'
    } else {
        implementation 'org.pytorch:pytorch_java_only:1.5.0'
        implementation 'org.nd4j:nd4j-api:1.0.0-beta7'
        implementation 'org.nd4j:nd4j-native:1.0.0-beta7'
        implementation 'org.nd4j:nd4j-native-platform:1.0.0-beta7'
        implementation 'org.springframework:spring-core:2.5.6'
        implementation 'org.slf4j:slf4j-api:1.7.5'
        implementation 'org.slf4j:slf4j-log4j12:1.7.5'
    }
}

def LIBTORCH_HOME = System.getenv('LIBTORCH_HOME')
if (!LIBTORCH_HOME) {
  throw new RuntimeException('LIBTORCH_HOME not present in environment.');
}
if (!file(LIBTORCH_HOME).isDirectory()) {
  throw new RuntimeException('LIBTORCH_HOME does not refer to a directory.');
}

application {
    mainClassName = 'retinaface4j.App'
    applicationDefaultJvmArgs = ["-Djava.library.path=$LIBTORCH_HOME/lib"]
}
